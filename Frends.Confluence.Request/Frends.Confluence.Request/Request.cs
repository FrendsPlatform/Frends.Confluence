using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Dynamic;
using System.Linq;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Web;
using System.Xml.Linq;
using Frends.Confluence.Request.Definitions;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using static Frends.Confluence.Request.Definitions.Constants;

namespace Frends.Confluence.Request;

/// <summary>
/// Confluence Task.
/// </summary>
public static class Confluence
{
    /// <summary>
    /// Make a request to Confluence.
    /// [Documentation](https://tasks.frends.com/tasks/frends-tasks/Frends.Confluence.Request)
    /// </summary>
    /// <param name="input">Input parameters</param>
    /// <param name="token">Token generated by Frends to stop this task.</param>
    /// <returns>Object { bool IsSuccess, List&lt;string&gt; DeletedFiles, string ErrorMessage }</returns>
    public static async Task<Result> Request([PropertyTab] Input input, CancellationToken cancellationToken)
    {
        switch (input.ConfluenceMethod)
        {
            case ConfluenceMethod.CustomRequest:
                return await CustomRequest(input, cancellationToken);
            case ConfluenceMethod.CreatePage:
                return await CreatePage(input, cancellationToken);
            case ConfluenceMethod.UpdatePage:
                return await UpdatePage(input, cancellationToken);
            case ConfluenceMethod.DeletePage:
                return await DeletePage(input, cancellationToken);
            case ConfluenceMethod.GetPageById:
                return await GetPageById(input, cancellationToken);
            case ConfluenceMethod.GetPageByTitle:
                return await GetPageByTitle(input, cancellationToken);
            case ConfluenceMethod.CreateSpace:
                return await CreateSpace(input, cancellationToken);
            case ConfluenceMethod.DeleteSpace:
                return await DeleteSpace(input, cancellationToken);
            case ConfluenceMethod.GetSpaceByName:
                return await GetSpaceByName(input, cancellationToken);
            default:
                return new Result
                {
                    StatusCode = 400,
                    Content = $"Unsupported method: {input.ConfluenceMethod}"
                };
        }
    }

    /// <summary>
    /// Make a custom request to Confluence.
    /// </summary>
    /// <param name="input">Input parameters including space key, title, and body content.</param>
    /// <param name="token">Cancellation token.</param>
    /// <returns>Result of the create page request.</returns>
    public static async Task<Result> CustomRequest([PropertyTab] Input input, CancellationToken token)
    {
        var client = GetAuthorizedClient(input);
        var uri = GetFullUri(input);
        var content = new StringContent(input.JsonBody, Encoding.UTF8, "application/json");

        var message = new HttpRequestMessage
        {
            Method = GetHttpMethod(input.HttpMethod),
            RequestUri = uri,
            Content = content,
        };
        var response = await client.SendAsync(message, token);
        var responseContent = await response.Content.ReadAsStringAsync(token);
        if (response.Content == null || response.Content.Headers?.ContentType == null)
        {
            return new Result { StatusCode = (int)response.StatusCode, Content = null };
        }
        if (response.Content.Headers.ContentType.MediaType == "application/json")
        {
            var responseBody = JToken.Parse(responseContent);
            return new Result { StatusCode = (int)response.StatusCode, Content = responseBody };
        }
        else if (response.Content.Headers.ContentType.MediaType == "application/xml" ||
                 response.Content.Headers.ContentType.MediaType == "text/xml")
        {
            var xmlDoc = XDocument.Parse(responseContent);
            var jsonContent = JsonConvert.SerializeXNode(xmlDoc);
            var responseBody = JToken.Parse(jsonContent);
            return new Result { StatusCode = (int)response.StatusCode, Content = responseBody };
        }
        else if (response.Content.Headers.ContentType.MediaType == "text/html")
        {
            return new Result { StatusCode = (int)response.StatusCode, Content = responseContent };
        }
        else
        {
            throw new NotSupportedException($"Unsupported content type: {response.Content.Headers.ContentType.MediaType}");
        }
    }

    private static HttpClient GetAuthorizedClient(Input input)
    {
        var client = new HttpClient();
        var authenticationString = $"{input.Username}:{input.ApiToken}";
        var base64EncodedAuthenticationString = Convert.ToBase64String(
            Encoding.ASCII.GetBytes(authenticationString)
        );
        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(
            "Basic",
            base64EncodedAuthenticationString
        );
        return client;
    }

    private static Uri GetFullUri(Input input)
    {
        var versionPart = input.ApiVersion switch
        {
            ApiVersion.V1 => ApiV1Uri,
            ApiVersion.V2 => ApiV2Uri,
            _ => throw new InvalidEnumArgumentException(),
        };
        var baseUri = new Uri(
            $"https://{input.ConfluenceDomainName}.atlassian.net{versionPart}{input.OperationSufix.TrimStart('/')}"
        );

        var uriBuilder = new UriBuilder(baseUri);
        var query = HttpUtility.ParseQueryString(uriBuilder.Query);
        foreach (var param in input.QueryParameters)
        {
            query.Add(param.Key, param.Value);
        }
        uriBuilder.Query = query.ToString();
        return uriBuilder.Uri;
    }

    /// <summary>
    /// Create a new page in Confluence.
    /// </summary>
    /// <param name="input">Input parameters including space key, title, and body content.</param>
    /// <param name="token">Cancellation token.</param>
    /// <returns>Result of the create page request.</returns>
    public static async Task<Result> CreatePage(Input input, CancellationToken token)
    {
        var payload = new
        {
            spaceId = input.SpaceId,
            status = "current",
            title = input.Title,
            body = new
            {
                representation = "storage",
                value = input.Body
            }
        };

        var createPageInput = new Input
        {
            Username = input.Username,
            ApiToken = input.ApiToken,
            HttpMethod = Constants.HttpMethod.POST,
            ApiVersion = input.ApiVersion,
            ConfluenceDomainName = input.ConfluenceDomainName,
            OperationSufix = "/pages",
            JsonBody = JsonConvert.SerializeObject(payload),
        };

        return await CustomRequest(createPageInput, token);
    }

    /// <summary>
    /// Update an existing page in Confluence.
    /// </summary>
    /// <param name="input">Input parameters including page ID, title, body content, and version number.</param>
    /// <param name="token">Cancellation token.</param>
    /// <returns>Result of the update page request.</returns>
    public static async Task<Result> UpdatePage(Input input, CancellationToken token)
    {
        dynamic payload = new ExpandoObject();
        payload.id = input.PageId;
        payload.status = "current";
        payload.version = new ExpandoObject();
        payload.version.number = input.Version;

        if (!string.IsNullOrWhiteSpace(input.Title))
            ((IDictionary<string, object>)payload).Add("title", input.Title);

        if (!string.IsNullOrWhiteSpace(input.Body))
            ((IDictionary<string, object>)payload).Add("body", new { representation = "storage", value = input.Body });

        var updatePageInput = new Input
        {
            Username = input.Username,
            ApiToken = input.ApiToken,
            HttpMethod = Constants.HttpMethod.PUT,
            ApiVersion = input.ApiVersion,
            ConfluenceDomainName = input.ConfluenceDomainName,
            OperationSufix = $"/pages/{input.PageId}",
            JsonBody = JsonConvert.SerializeObject(payload),
        };

        return await CustomRequest(updatePageInput, token);
    }

    /// <summary>
    /// Get a page from Confluence by its ID.
    /// </summary>
    /// <param name="input">Input parameters including page ID.</param>
    /// <param name="token">Cancellation token.</param>
    /// <returns>Result of the get page request.</returns>
    public static async Task<Result> GetPageById(Input input, CancellationToken token)
    {
        var getPageInput = new Input
        {
            Username = input.Username,
            ApiToken = input.ApiToken,
            HttpMethod = Constants.HttpMethod.GET,
            ApiVersion = input.ApiVersion,
            ConfluenceDomainName = input.ConfluenceDomainName,
            OperationSufix = $"/pages/{input.PageId}",
        };

        return await CustomRequest(getPageInput, token);
    }

    /// <summary>
    /// Delete a page from Confluence by its ID.
    /// </summary>
    /// <param name="input">Input parameters including page ID.</param>
    /// <param name="token">Cancellation token.</param>
    /// <returns>Result of the delete page request.</returns>
    public static async Task<Result> DeletePage(Input input, CancellationToken token)
    {
        var deletePageInput = new Input
        {
            Username = input.Username,
            ApiToken = input.ApiToken,
            HttpMethod = Constants.HttpMethod.DELETE,
            ApiVersion = input.ApiVersion,
            ConfluenceDomainName = input.ConfluenceDomainName,
            OperationSufix = $"/pages/{input.PageId}",
        };

        return await CustomRequest(deletePageInput, token);
    }

    // <summary>
    /// Retrieves the Confluence page by its title.
    /// </summary>
    /// <param name="title">The title of the page to search for.</param>
    /// <param name="input">Input parameters including authentication details and Confluence domain information.</param>
    /// <param name="token">Cancellation token.</param>
    /// <returns>The page if found.</returns>
    public static async Task<Result> GetPageByTitle(Input input, CancellationToken token)
    {
        var queryParameters = new Dictionary<string, string>
        {
            { "title", input.Title },
            { "expand", "metadata" }
        };

        var searchInput = new Input
        {
            Username = input.Username,
            ApiToken = input.ApiToken,
            HttpMethod = Constants.HttpMethod.GET,
            ApiVersion = input.ApiVersion,
            ConfluenceDomainName = input.ConfluenceDomainName,
            OperationSufix = "/pages",
            QueryParameters = queryParameters
        };

        return await CustomRequest(searchInput, token);
    }

    /// <summary>
    /// Create a new space in Confluence.
    /// </summary>
    /// <param name="input">Input parameters including space key and space name.</param>
    /// <param name="token">Cancellation token.</param>
    /// <returns>Result of the create space request.</returns>
    public static async Task<Result> CreateSpace(Input input, CancellationToken token)
    {
        var payload = new
        {
            key = input.SpaceKey,
            name = input.SpaceName
        };

        var createSpaceInput = new Input
        {
            Username = input.Username,
            ApiToken = input.ApiToken,
            HttpMethod = Constants.HttpMethod.POST,
            ApiVersion = input.ApiVersion,
            ConfluenceDomainName = input.ConfluenceDomainName,
            OperationSufix = "/space",
            JsonBody = JsonConvert.SerializeObject(payload),
        };

        return await CustomRequest(createSpaceInput, token);
    }

    /// <summary>
    /// Delete a space in Confluence.
    /// </summary>
    /// <param name="input">Input parameters including space key.</param>
    /// <param name="token">Cancellation token.</param>
    /// <returns>Result of the delete space request.</returns>
    public static async Task<Result> DeleteSpace(Input input, CancellationToken token)
    {
        var deleteSpaceInput = new Input
        {
            Username = input.Username,
            ApiToken = input.ApiToken,
            HttpMethod = Constants.HttpMethod.DELETE,
            ApiVersion = ApiVersion.V1,
            ConfluenceDomainName = input.ConfluenceDomainName,
            OperationSufix = $"/space/{input.SpaceKey}",
        };

        return await CustomRequest(deleteSpaceInput, token);
    }

    /// <summary>
    /// Retrieve a space in Confluence by its name.
    /// </summary>
    /// <param name="input">Input parameters including username, API token, Confluence domain, API version, and space name.</param>
    /// <param name="token">Cancellation token.</param>
    /// <returns>Result of the get space by name request.</returns>
    public static async Task<Result> GetSpaceByName(Input input, CancellationToken token)
    {
        var queryParameters = new Dictionary<string, string>
    {
        { "name", input.SpaceName }
    };

        var searchInput = new Input
        {
            Username = input.Username,
            ApiToken = input.ApiToken,
            HttpMethod = Constants.HttpMethod.GET,
            ApiVersion = input.ApiVersion,
            ConfluenceDomainName = input.ConfluenceDomainName,
            OperationSufix = "/spaces",
            QueryParameters = queryParameters
        };

        return await CustomRequest(searchInput, token);
    }
}
